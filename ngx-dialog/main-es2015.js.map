{"version":3,"sources":["./$_lazy_route_resource lazy namespace object","./projects/lib-ngx-dialog/src/lib/lib-ngx-dialog.service.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/environments/environment.ts","./src/main.ts"],"names":[],"mappings":"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","file":"main-es2015.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { Injectable } from '@angular/core';\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Subscription} from 'rxjs';\nimport {Portal} from '@angular/cdk/portal';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LibNgxDialogService {\n\n  private overlayRefInstance: OverlayRef;\n  private backdropClickSubscription: Subscription | null = null;\n  private isShown = false;\n\n  set overlayRef(overlayRef: OverlayRef) {\n    this.overlayRefInstance = overlayRef;\n    if (this.backdropClickSubscription !== null) {\n      this.backdropClickSubscription.unsubscribe();\n    }\n    this.backdropClickSubscription = this.overlayRefInstance.backdropClick().subscribe(this.hide.bind(this));\n  }\n\n  show(portal: Portal<any>) {\n    this.checkIsOverlayRefExists();\n    if (!this.isShown) {\n      this.overlayRefInstance.attach(portal);\n      this.isShown = true;\n    }\n  }\n\n  hide() {\n    this.checkIsOverlayRefExists();\n    if (this.isShown) {\n      this.overlayRefInstance.detach();\n      this.isShown = false;\n    }\n  }\n\n  private checkIsOverlayRefExists() {\n    if (!this.overlayRefInstance) {\n      throw Error('[LibNgxDialogService] OverlayRef not registered. Please register by using overlayRef setter.');\n    }\n  }\n\n}\n","import {Component, OnInit, TemplateRef, ViewChild, ViewContainerRef} from '@angular/core';\nimport {LibNgxDialogService} from '../../projects/lib-ngx-dialog/src/lib/lib-ngx-dialog.service';\nimport {Overlay} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent implements OnInit {\n\n  @ViewChild('dialogHello') dialogHelloRef: TemplateRef<any>;\n\n  constructor(private overlay: Overlay, public viewContainerRef: ViewContainerRef, public dialogService: LibNgxDialogService) {}\n\n  ngOnInit() {\n    this.dialogService.overlayRef = this.overlay.create({\n      hasBackdrop: true,\n      width: '100rem',\n      maxWidth: 'calc(100% - 5rem)',\n      scrollStrategy: this.overlay.scrollStrategies.block()\n    });\n  }\n\n  createTemplatePortal(templateRef: TemplateRef<any>) {\n    return new TemplatePortal(templateRef, this.viewContainerRef);\n  }\n\n}\n","<ng-container>\n\t<button\n\t\tclass=\"btn-show-dialog\"\n\t\tmat-raised-button\n\t\tcolor=\"primary\"\n\t\t(click)=\"dialogService.show(createTemplatePortal(dialogHelloRef))\"\n\t>\n\t\tShow Dialog\n\t</button>\n\n\t<ng-template #dialogHello>\n\t\t<section class=\"dialog-hello\">\n\t\t\t<h1 class=\"dialog-hello__hdg\">Hello World</h1>\n\t\t\t<p class=\"dialog-hello__description\">\n\t\t\t\tThis is dialog shown by LibNgxDialogService.\n\t\t\t</p>\n\t\t\t<button class=\"dialog-hello__btn-close\" mat-icon-button (click)=\"dialogService.hide()\">\n\t\t\t\t<mat-icon aria-hidden=\"false\" aria-label=\"Close dialog\">close</mat-icon>\n\t\t\t</button>\n\t\t</section>\n\t</ng-template>\n</ng-container>\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from './app.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatIconModule} from '@angular/material/icon';\n\n@NgModule({\n  declarations: [AppComponent],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    MatButtonModule,\n    MatIconModule,\n    OverlayModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","\nimport { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":"webpack:///"}