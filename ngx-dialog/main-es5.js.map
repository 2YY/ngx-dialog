{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///projects/lib-ngx-dialog/src/lib/lib-ngx-dialog.service.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","LibNgxDialogService","backdropClickSubscription","isShown","portal","checkIsOverlayRefExists","overlayRefInstance","attach","detach","overlayRef","unsubscribe","backdropClick","subscribe","hide","bind","providedIn","dialogService","AppComponent","overlay","viewContainerRef","create","hasBackdrop","width","maxWidth","scrollStrategy","scrollStrategies","block","templateRef","createTemplatePortal","selector","templateUrl","styleUrls","AppModule","declarations","imports","providers","bootstrap","environment","production","bootstrapModule","catch","err","console","error"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { Injectable } from '@angular/core';\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Subscription} from 'rxjs';\nimport {Portal} from '@angular/cdk/portal';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LibNgxDialogService {\n\n  private overlayRefInstance: OverlayRef;\n  private backdropClickSubscription: Subscription | null = null;\n  private isShown = false;\n\n  set overlayRef(overlayRef: OverlayRef) {\n    this.overlayRefInstance = overlayRef;\n    if (this.backdropClickSubscription !== null) {\n      this.backdropClickSubscription.unsubscribe();\n    }\n    this.backdropClickSubscription = this.overlayRefInstance.backdropClick().subscribe(this.hide.bind(this));\n  }\n\n  show(portal: Portal<any>) {\n    this.checkIsOverlayRefExists();\n    if (!this.isShown) {\n      this.overlayRefInstance.attach(portal);\n      this.isShown = true;\n    }\n  }\n\n  hide() {\n    this.checkIsOverlayRefExists();\n    if (this.isShown) {\n      this.overlayRefInstance.detach();\n      this.isShown = false;\n    }\n  }\n\n  private checkIsOverlayRefExists() {\n    if (!this.overlayRefInstance) {\n      throw Error('[LibNgxDialogService] OverlayRef not registered. Please register by using overlayRef setter.');\n    }\n  }\n\n}\n","import {Component, OnInit, TemplateRef, ViewChild, ViewContainerRef} from '@angular/core';\nimport {LibNgxDialogService} from '../../projects/lib-ngx-dialog/src/lib/lib-ngx-dialog.service';\nimport {Overlay} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent implements OnInit {\n\n  @ViewChild('dialogHello') dialogHelloRef: TemplateRef<any>;\n\n  constructor(private overlay: Overlay, public viewContainerRef: ViewContainerRef, public dialogService: LibNgxDialogService) {}\n\n  ngOnInit() {\n    this.dialogService.overlayRef = this.overlay.create({\n      hasBackdrop: true,\n      width: '100rem',\n      maxWidth: 'calc(100% - 5rem)',\n      scrollStrategy: this.overlay.scrollStrategies.block()\n    });\n  }\n\n  createTemplatePortal(templateRef: TemplateRef<any>) {\n    return new TemplatePortal(templateRef, this.viewContainerRef);\n  }\n\n}\n","<ng-container>\n\t<button\n\t\tclass=\"btn-show-dialog\"\n\t\tmat-raised-button\n\t\tcolor=\"primary\"\n\t\t(click)=\"dialogService.show(createTemplatePortal(dialogHelloRef))\"\n\t>\n\t\tShow Dialog\n\t</button>\n\n\t<ng-template #dialogHello>\n\t\t<section class=\"dialog-hello\">\n\t\t\t<h1 class=\"dialog-hello__hdg\">Hello World</h1>\n\t\t\t<p class=\"dialog-hello__description\">\n\t\t\t\tThis is dialog shown by LibNgxDialogService.\n\t\t\t</p>\n\t\t\t<button class=\"dialog-hello__btn-close\" mat-icon-button (click)=\"dialogService.hide()\">\n\t\t\t\t<mat-icon aria-hidden=\"false\" aria-label=\"Close dialog\">close</mat-icon>\n\t\t\t</button>\n\t\t</section>\n\t</ng-template>\n</ng-container>\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from './app.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatIconModule} from '@angular/material/icon';\n\n@NgModule({\n  declarations: [AppComponent],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    MatButtonModule,\n    MatIconModule,\n    OverlayModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","\nimport { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}